# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `cameras.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Cameras
_M_Cameras = Ice.openModule('Cameras')
__name__ = 'Cameras'

if 'came' not in _M_Cameras.__dict__:
    _M_Cameras.came = Ice.createTempClass()
    class came(object):
        def __init__(self, On=0, P=0, T=0, Z=0, MaxZoom=0):
            self.On = On
            self.P = P
            self.T = T
            self.Z = Z
            self.MaxZoom = MaxZoom

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.On)
            _h = 5 * _h + Ice.getHash(self.P)
            _h = 5 * _h + Ice.getHash(self.T)
            _h = 5 * _h + Ice.getHash(self.Z)
            _h = 5 * _h + Ice.getHash(self.MaxZoom)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Cameras.came):
                return NotImplemented
            else:
                if self.On is None or other.On is None:
                    if self.On != other.On:
                        return (-1 if self.On is None else 1)
                else:
                    if self.On < other.On:
                        return -1
                    elif self.On > other.On:
                        return 1
                if self.P is None or other.P is None:
                    if self.P != other.P:
                        return (-1 if self.P is None else 1)
                else:
                    if self.P < other.P:
                        return -1
                    elif self.P > other.P:
                        return 1
                if self.T is None or other.T is None:
                    if self.T != other.T:
                        return (-1 if self.T is None else 1)
                else:
                    if self.T < other.T:
                        return -1
                    elif self.T > other.T:
                        return 1
                if self.Z is None or other.Z is None:
                    if self.Z != other.Z:
                        return (-1 if self.Z is None else 1)
                else:
                    if self.Z < other.Z:
                        return -1
                    elif self.Z > other.Z:
                        return 1
                if self.MaxZoom is None or other.MaxZoom is None:
                    if self.MaxZoom != other.MaxZoom:
                        return (-1 if self.MaxZoom is None else 1)
                else:
                    if self.MaxZoom < other.MaxZoom:
                        return -1
                    elif self.MaxZoom > other.MaxZoom:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Cameras._t_came)

        __repr__ = __str__

    _M_Cameras._t_came = IcePy.defineStruct('::Cameras::came', came, (), (
        ('On', (), IcePy._t_int),
        ('P', (), IcePy._t_int),
        ('T', (), IcePy._t_int),
        ('Z', (), IcePy._t_int),
        ('MaxZoom', (), IcePy._t_int)
    ))

    _M_Cameras.came = came
    del came

if '_t_cams' not in _M_Cameras.__dict__:
    _M_Cameras._t_cams = IcePy.defineSequence('::Cameras::cams', (), _M_Cameras._t_came)

if 'NoInput' not in _M_Cameras.__dict__:
    _M_Cameras.NoInput = Ice.createTempClass()
    class NoInput(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Cameras::NoInput'

    _M_Cameras._t_NoInput = IcePy.defineException('::Cameras::NoInput', NoInput, (), False, None, ())
    NoInput._ice_type = _M_Cameras._t_NoInput

    _M_Cameras.NoInput = NoInput
    del NoInput

if 'OutOfBoundry' not in _M_Cameras.__dict__:
    _M_Cameras.OutOfBoundry = Ice.createTempClass()
    class OutOfBoundry(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Cameras::OutOfBoundry'

    _M_Cameras._t_OutOfBoundry = IcePy.defineException('::Cameras::OutOfBoundry', OutOfBoundry, (), False, None, ())
    OutOfBoundry._ice_type = _M_Cameras._t_OutOfBoundry

    _M_Cameras.OutOfBoundry = OutOfBoundry
    del OutOfBoundry

_M_Cameras._t_Cam = IcePy.defineValue('::Cameras::Cam', Ice.Value, -1, (), False, True, None, ())

if 'CamPrx' not in _M_Cameras.__dict__:
    _M_Cameras.CamPrx = Ice.createTempClass()
    class CamPrx(Ice.ObjectPrx):

        def switch(self, id, context=None):
            return _M_Cameras.Cam._op_switch.invoke(self, ((id, ), context))

        def switchAsync(self, id, context=None):
            return _M_Cameras.Cam._op_switch.invokeAsync(self, ((id, ), context))

        def begin_switch(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Cameras.Cam._op_switch.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_switch(self, _r):
            return _M_Cameras.Cam._op_switch.end(self, _r)

        def _print(self, id, context=None):
            return _M_Cameras.Cam._op_print.invoke(self, ((id, ), context))

        def printAsync(self, id, context=None):
            return _M_Cameras.Cam._op_print.invokeAsync(self, ((id, ), context))

        def begin_print(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Cameras.Cam._op_print.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_print(self, _r):
            return _M_Cameras.Cam._op_print.end(self, _r)

        def turnVertical(self, id, val, context=None):
            return _M_Cameras.Cam._op_turnVertical.invoke(self, ((id, val), context))

        def turnVerticalAsync(self, id, val, context=None):
            return _M_Cameras.Cam._op_turnVertical.invokeAsync(self, ((id, val), context))

        def begin_turnVertical(self, id, val, _response=None, _ex=None, _sent=None, context=None):
            return _M_Cameras.Cam._op_turnVertical.begin(self, ((id, val), _response, _ex, _sent, context))

        def end_turnVertical(self, _r):
            return _M_Cameras.Cam._op_turnVertical.end(self, _r)

        def turnHorizontal(self, id, val, context=None):
            return _M_Cameras.Cam._op_turnHorizontal.invoke(self, ((id, val), context))

        def turnHorizontalAsync(self, id, val, context=None):
            return _M_Cameras.Cam._op_turnHorizontal.invokeAsync(self, ((id, val), context))

        def begin_turnHorizontal(self, id, val, _response=None, _ex=None, _sent=None, context=None):
            return _M_Cameras.Cam._op_turnHorizontal.begin(self, ((id, val), _response, _ex, _sent, context))

        def end_turnHorizontal(self, _r):
            return _M_Cameras.Cam._op_turnHorizontal.end(self, _r)

        def zoom(self, id, val, context=None):
            return _M_Cameras.Cam._op_zoom.invoke(self, ((id, val), context))

        def zoomAsync(self, id, val, context=None):
            return _M_Cameras.Cam._op_zoom.invokeAsync(self, ((id, val), context))

        def begin_zoom(self, id, val, _response=None, _ex=None, _sent=None, context=None):
            return _M_Cameras.Cam._op_zoom.begin(self, ((id, val), _response, _ex, _sent, context))

        def end_zoom(self, _r):
            return _M_Cameras.Cam._op_zoom.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Cameras.CamPrx.ice_checkedCast(proxy, '::Cameras::Cam', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Cameras.CamPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Cameras::Cam'
    _M_Cameras._t_CamPrx = IcePy.defineProxy('::Cameras::Cam', CamPrx)

    _M_Cameras.CamPrx = CamPrx
    del CamPrx

    _M_Cameras.Cam = Ice.createTempClass()
    class Cam(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Cameras::Cam', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Cameras::Cam'

        @staticmethod
        def ice_staticId():
            return '::Cameras::Cam'

        def switch(self, id, current=None):
            raise NotImplementedError("servant method 'switch' not implemented")

        def _print(self, id, current=None):
            raise NotImplementedError("servant method '_print' not implemented")

        def turnVertical(self, id, val, current=None):
            raise NotImplementedError("servant method 'turnVertical' not implemented")

        def turnHorizontal(self, id, val, current=None):
            raise NotImplementedError("servant method 'turnHorizontal' not implemented")

        def zoom(self, id, val, current=None):
            raise NotImplementedError("servant method 'zoom' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Cameras._t_CamDisp)

        __repr__ = __str__

    _M_Cameras._t_CamDisp = IcePy.defineClass('::Cameras::Cam', Cam, (), None, ())
    Cam._ice_type = _M_Cameras._t_CamDisp

    Cam._op_switch = IcePy.Operation('switch', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Cameras._t_OutOfBoundry,))
    Cam._op_print = IcePy.Operation('print', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_Cameras._t_came, False, 0), (_M_Cameras._t_OutOfBoundry,))
    Cam._op_turnVertical = IcePy.Operation('turnVertical', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_Cameras._t_OutOfBoundry,))
    Cam._op_turnHorizontal = IcePy.Operation('turnHorizontal', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_Cameras._t_OutOfBoundry,))
    Cam._op_zoom = IcePy.Operation('zoom', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_Cameras._t_OutOfBoundry,))

    _M_Cameras.Cam = Cam
    del Cam

# End of module Cameras
