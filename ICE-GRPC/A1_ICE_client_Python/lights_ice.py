# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `lights.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Lights
_M_Lights = Ice.openModule('Lights')
__name__ = 'Lights'

if '_t_list' not in _M_Lights.__dict__:
    _M_Lights._t_list = IcePy.defineSequence('::Lights::list', (), IcePy._t_int)

if 'NoInput' not in _M_Lights.__dict__:
    _M_Lights.NoInput = Ice.createTempClass()
    class NoInput(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Lights::NoInput'

    _M_Lights._t_NoInput = IcePy.defineException('::Lights::NoInput', NoInput, (), False, None, ())
    NoInput._ice_type = _M_Lights._t_NoInput

    _M_Lights.NoInput = NoInput
    del NoInput

if 'OutOfBoundry' not in _M_Lights.__dict__:
    _M_Lights.OutOfBoundry = Ice.createTempClass()
    class OutOfBoundry(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Lights::OutOfBoundry'

    _M_Lights._t_OutOfBoundry = IcePy.defineException('::Lights::OutOfBoundry', OutOfBoundry, (), False, None, ())
    OutOfBoundry._ice_type = _M_Lights._t_OutOfBoundry

    _M_Lights.OutOfBoundry = OutOfBoundry
    del OutOfBoundry

_M_Lights._t_Light = IcePy.defineValue('::Lights::Light', Ice.Value, -1, (), False, True, None, ())

if 'LightPrx' not in _M_Lights.__dict__:
    _M_Lights.LightPrx = Ice.createTempClass()
    class LightPrx(Ice.ObjectPrx):

        def switch(self, id, context=None):
            return _M_Lights.Light._op_switch.invoke(self, ((id, ), context))

        def switchAsync(self, id, context=None):
            return _M_Lights.Light._op_switch.invokeAsync(self, ((id, ), context))

        def begin_switch(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Lights.Light._op_switch.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_switch(self, _r):
            return _M_Lights.Light._op_switch.end(self, _r)

        def _print(self, id, context=None):
            return _M_Lights.Light._op_print.invoke(self, ((id, ), context))

        def printAsync(self, id, context=None):
            return _M_Lights.Light._op_print.invokeAsync(self, ((id, ), context))

        def begin_print(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Lights.Light._op_print.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_print(self, _r):
            return _M_Lights.Light._op_print.end(self, _r)

        def all(self, context=None):
            return _M_Lights.Light._op_all.invoke(self, ((), context))

        def allAsync(self, context=None):
            return _M_Lights.Light._op_all.invokeAsync(self, ((), context))

        def begin_all(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Lights.Light._op_all.begin(self, ((), _response, _ex, _sent, context))

        def end_all(self, _r):
            return _M_Lights.Light._op_all.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Lights.LightPrx.ice_checkedCast(proxy, '::Lights::Light', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Lights.LightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Lights::Light'
    _M_Lights._t_LightPrx = IcePy.defineProxy('::Lights::Light', LightPrx)

    _M_Lights.LightPrx = LightPrx
    del LightPrx

    _M_Lights.Light = Ice.createTempClass()
    class Light(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Lights::Light')

        def ice_id(self, current=None):
            return '::Lights::Light'

        @staticmethod
        def ice_staticId():
            return '::Lights::Light'

        def switch(self, id, current=None):
            raise NotImplementedError("servant method 'switch' not implemented")

        def _print(self, id, current=None):
            raise NotImplementedError("servant method '_print' not implemented")

        def all(self, current=None):
            raise NotImplementedError("servant method 'all' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Lights._t_LightDisp)

        __repr__ = __str__

    _M_Lights._t_LightDisp = IcePy.defineClass('::Lights::Light', Light, (), None, ())
    Light._ice_type = _M_Lights._t_LightDisp

    Light._op_switch = IcePy.Operation('switch', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Lights._t_OutOfBoundry,))
    Light._op_print = IcePy.Operation('print', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_Lights._t_OutOfBoundry,))
    Light._op_all = IcePy.Operation('all', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Lights._t_list, False, 0), ())

    _M_Lights.Light = Light
    del Light

# End of module Lights
