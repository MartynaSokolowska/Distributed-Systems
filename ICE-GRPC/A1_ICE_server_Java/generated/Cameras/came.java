//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `cameras.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Cameras;

public class came implements java.lang.Cloneable,
                             java.io.Serializable
{
    public int On;

    public int P;

    public int T;

    public int Z;

    public int MaxZoom;

    public came()
    {
    }

    public came(int On, int P, int T, int Z, int MaxZoom)
    {
        this.On = On;
        this.P = P;
        this.T = T;
        this.Z = Z;
        this.MaxZoom = MaxZoom;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        came r = null;
        if(rhs instanceof came)
        {
            r = (came)rhs;
        }

        if(r != null)
        {
            if(this.On != r.On)
            {
                return false;
            }
            if(this.P != r.P)
            {
                return false;
            }
            if(this.T != r.T)
            {
                return false;
            }
            if(this.Z != r.Z)
            {
                return false;
            }
            if(this.MaxZoom != r.MaxZoom)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Cameras::came");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, On);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, P);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, T);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, Z);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, MaxZoom);
        return h_;
    }

    public came clone()
    {
        came c = null;
        try
        {
            c = (came)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.On);
        ostr.writeInt(this.P);
        ostr.writeInt(this.T);
        ostr.writeInt(this.Z);
        ostr.writeInt(this.MaxZoom);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.On = istr.readInt();
        this.P = istr.readInt();
        this.T = istr.readInt();
        this.Z = istr.readInt();
        this.MaxZoom = istr.readInt();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, came v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public came ice_read(com.zeroc.Ice.InputStream istr)
    {
        came v = new came();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<came> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, came v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(20);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<came> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(came.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final came _nullMarshalValue = new came();

    /** @hidden */
    public static final long serialVersionUID = -7291725331802503216L;
}
